<UserControl x:Class="TilesDavis.Wpf.Views.ShortcutDetailsFlyout"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:util="clr-namespace:TilesDavis.Wpf.Util"
             xmlns:vm="clr-namespace:TilesDavis.Wpf.ViewModels"
             xmlns:td="clr-namespace:TilesDavis.Core;assembly=TilesDavis.Core"
             xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:cp="clr-namespace:ColorPickerLib.Controls;assembly=ColorPickerLib"
             mc:Ignorable="d"
             Background="{StaticResource WindowBackgroundBrush}"
             xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
             FontSize="{StaticResource NormalFontSize}"
             d:DesignHeight="640" d:DesignWidth="350">
    <UserControl.Resources>
        <ControlTemplate x:Key="CheckBoxControlTemplate1" TargetType="{x:Type CheckBox}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="LeftCol" Width="18"/>
                    <ColumnDefinition x:Name="RightCol" Width="*"/>
                </Grid.ColumnDefinitions>
                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualState x:Name="Normal"/>
                        <VisualState x:Name="Disabled">
                            <Storyboard>
                                <DoubleAnimation Duration="0" To="0.55" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter"/>
                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="disabled"/>
                            </Storyboard>
                        </VisualState>
                    </VisualStateGroup>
                    <VisualStateGroup x:Name="CheckStates">
                        <VisualState x:Name="Checked">
                        </VisualState>
                        <VisualState x:Name="Unchecked"/>
                        <VisualState x:Name="Indeterminate">
                            <Storyboard>
                                <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="IndeterminateCheck"/>
                            </Storyboard>
                        </VisualState>
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <Grid x:Name="PART_CHECKBOX">
                    <Rectangle Fill="{DynamicResource TransparentWhiteBrush}" Margin="-6,0"/>
                    <Border x:Name="normal" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Height="18" Width="18"/>
                    <Path x:Name="checkBox" Data="M1145.60717773438,430C1145.60717773438,430 1141.44995117188,435.077270507813 1141.44995117188,435.077270507813 1141.44995117188,435.077270507813 1139.23217773438,433.099975585938 1139.23217773438,433.099975585938 1139.23217773438,433.099975585938 1138,434.553833007813 1138,434.553833007813 1138,434.553833007813 1141.48217773438,438 1141.48217773438,438 1141.48217773438,438 1141.96875,437.9375 1141.96875,437.9375 1141.96875,437.9375 1147,431.34619140625 1147,431.34619140625 1147,431.34619140625 1145.60717773438,430 1145.60717773438,430z" Fill="{DynamicResource HighlightBrush}" Height="10" Opacity="0" Stretch="Fill" UseLayoutRounding="False" Width="12"/>
                    <Rectangle x:Name="IndeterminateCheck" Fill="{DynamicResource GrayBrush3}" Height="3" Opacity="0" Width="8"/>
                    <Border x:Name="disabled" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource SemiTransparentWhiteBrush}" Height="18" Opacity="0" Width="18"/>
                </Grid>
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="BorderBrush" TargetName="normal" Value="{Binding (controls:ControlsHelper.MouseOverBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="BorderBrush" TargetName="normal" Value="{DynamicResource HighlightBrush}"/>
                </Trigger>
                <Trigger Property="IsFocused" Value="True">
                    <Setter Property="BorderBrush" TargetName="normal" Value="{Binding (controls:ControlsHelper.FocusBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"/>
                </Trigger>
                <Trigger Property="FlowDirection" Value="RightToLeft">
                    <Setter Property="LayoutTransform" TargetName="checkBox">
                        <Setter.Value>
                            <ScaleTransform ScaleX="-1"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="controls:ToggleButtonHelper.ContentDirection" Value="RightToLeft">
                    <Setter Property="Padding" Value="0,0,6,0"/>
                    <Setter Property="Width" TargetName="LeftCol" Value="*"/>
                    <Setter Property="Width" TargetName="RightCol" Value="18"/>
                    <Setter Property="Grid.Column" TargetName="PART_CHECKBOX" Value="1"/>
                    <Setter Property="Grid.Column" TargetName="contentPresenter" Value="0"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </UserControl.Resources>
    <ScrollViewer>
    <DockPanel Margin="25"
               LastChildFill="False"
               util:MarginSetter.Margin="10"
               d:DataContext="{d:DesignInstance vm:ShortcutViewModel, IsDesignTimeCreatable=False}">
        <DockPanel.Resources>
            <Style TargetType="Button" BasedOn="{StaticResource AccentedSquareButtonStyle}">
                <Setter Property="controls:ControlsHelper.ContentCharacterCasing" Value="Normal"/>
            </Style>
        </DockPanel.Resources>

        <TextBlock DockPanel.Dock="Top" Text="{Binding Name}" TextWrapping="Wrap"/>
        <CheckBox DockPanel.Dock="Top" IsChecked="{Binding ShowNameOnSquare150x150Logo}"
                Content="Show name on tile"
                Style="{StaticResource MetroCheckBox}"/>
        <CheckBox DockPanel.Dock="Top"
                  Content="Background color"
                  Template="{DynamicResource CheckBoxControlTemplate1}"
                  Background="{Binding BackgroundColor}"
                  IsChecked="{Binding ColorPickerVisible}"
                  IsEnabled="{Binding UseWindowsAccent, Converter={StaticResource InverseBooleanConverter}}"/>
        <CheckBox DockPanel.Dock="Top"
                      Content="Use Windows accent as background"
                      Style="{StaticResource MetroCheckBox}"
                      IsChecked="{Binding UseWindowsAccent}" />
        <cp:ColorCanvas DockPanel.Dock="Top"
                        x:Name="colorPicker"
                        UsingAlphaChannel="False"
                        Background="Transparent"
                        BorderBrush="Transparent"
                        SelectedColor="{Binding BackgroundColor, Converter={StaticResource BrushColorConverter}}"
                        Visibility="{Binding ColorPickerVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />

        <Border DockPanel.Dock="Top" 
                Height="125" Width="125" 
                Background="{Binding BackgroundColor}"
                HorizontalAlignment="Center">
            <Grid>
                <Image Source="{Binding Tile}">
                    <Image.Style>
                        <Style>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding HasTile}" Value="True">
                                    <Setter Property="Image.Width" Value="125" />
                                    <Setter Property="Image.Height" Value="125" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding HasTile}" Value="false">
                                    <Setter Property="Image.Width" Value="40" />
                                    <Setter Property="Image.Height" Value="40" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
                <TextBlock Text="{Binding Name}"
                           Visibility="{Binding ShowNameOnSquare150x150Logo, Converter={StaticResource BooleanToVisibilityConverter}}"
                           TextTrimming="WordEllipsis"
                           MaxHeight="32"
                           Margin="10,0,10,7"
                           Foreground="White"
                           
                           VerticalAlignment="Bottom"
                           FontSize="12"
                           TextWrapping="Wrap"/>
            </Grid>
        </Border>

        <Button DockPanel.Dock="Top"
                Content="Change tile"
                Command="{Binding SelectTileCommand}"/>
        <Button DockPanel.Dock="Top"
                Content="Remove tile"
                Command="{Binding RemoveTileCommand}"/>
        <Button DockPanel.Dock="Top"
                Content="Remove all modifications"
                Command="{Binding RemoveAllModificationsCommand}"/>

        <Button Width="50"
                        Height="50"
                        Style="{StaticResource MetroCircleButtonStyle}"
                        Command="{Binding SaveCommand}"
                        DockPanel.Dock="Bottom" HorizontalAlignment="Left">
            <Rectangle Width="20"
                               Height="20"
                               Fill="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                <Rectangle.OpacityMask>
                    <VisualBrush Stretch="Fill"
                                         Visual="{StaticResource appbar_save}" />
                </Rectangle.OpacityMask>
            </Rectangle>
        </Button>
    </DockPanel>
    </ScrollViewer>
</UserControl>
